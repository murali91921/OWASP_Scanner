using Microsoft.CodeAnalysis;
using System;
using System.Collections.Generic;

namespace SAST.Engine.CSharp
{
    /// <summary>
    /// This object will contain vulnerable information such as File Path, Line Number, Code Snippet etc...
    /// </summary>
    public class VulnerabilityDetail
    {
        private VulnerabilityDetail()
        { }

        public string FilePath { get; set; }

        public string Title { get; set; }

        public string LineNumber { get; set; }

        public string CodeSnippet { get; set; }

        public string Code { get; set; }

        public string Message { get; set; }

        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Enums.ScannerType Type { get; set; }

        //[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        //public Enums.ScannerSubType SubType { get; set; }

        //private string _description { get; set; }

        //public string Description
        //{
        //    get
        //    {
        //        if (string.IsNullOrEmpty(_description) && (Type != Enums.ScannerType.None || Type != Enums.ScannerType.Invalid))
        //        {
        //            _description = Utils.ScannerDescriptions.GetValueOrDefault(Type);
        //            if (SubType != Enums.ScannerSubType.None)
        //                _description = $"{_description}:{Utils.ScannerSubTypeDescriptions.GetValueOrDefault(Type).GetValueOrDefault(SubType)}";
        //        }
        //        return _description;
        //    }
        //    set => _description = value;
        //}

        public string Description
        {
            get; set;
        }

        public override string ToString() => $"{FilePath}:({LineNumber}) {Environment.NewLine}Snippet:{CodeSnippet} {Environment.NewLine}Type:{Type} {Environment.NewLine}Description:{Description} {Environment.NewLine}Message:{Message} {Environment.NewLine}Title:{Title} {Environment.NewLine}Severity:{Severity} {Environment.NewLine}Code:{Code}  {Environment.NewLine}Message:{Message}";

        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Enums.Severity Severity => Utils.ScannerTypeSeverity.GetValueOrDefault(Type);
        //{
        //    get => 
        //    //SubType == Enums.ScannerSubType.None ? Utils.ScannerTypeSeverity.GetValueOrDefault(Type);
        //    //        Utils.ScannerSubTypeSeverity.GetValueOrDefault(SubType);
        //}
        private static string GetResourceString(string code, string content) =>
            new LocalizableResourceString(string.Format("{0}_{1}", code, content), Descriptors.ResourceManager, typeof(Descriptors)).ToString();

        public static VulnerabilityDetail Create(string filePath, SyntaxNodeOrToken codeSnippet, Enums.ScannerType category = Enums.ScannerType.None, string message = null)
        {
            string code = "OPT" + category.GetHashCode().ToString("D4");
            return new VulnerabilityDetail
            {
                FilePath = filePath,
                CodeSnippet = codeSnippet.ToString(),
                LineNumber = Mapper.Map.GetLineNumber(codeSnippet),
                Code = code,
                Description = GetResourceString(code, "Description"),
                Message = string.IsNullOrWhiteSpace(message) ? GetResourceString(code, "MessageFormat") : message,
                Type = category,
                Title = GetResourceString(code, "Title")
            };
        }

        public static VulnerabilityDetail Create(string filePath, System.Xml.XPath.XPathNavigator element, Enums.ScannerType category = Enums.ScannerType.None, string message = null)
        {
            string code = "OPT" + category.GetHashCode().ToString("D4");
            return new VulnerabilityDetail
            {
                FilePath = filePath,
                CodeSnippet = element.OuterXml.Trim(),
                LineNumber = Mapper.Map.GetLineNumber(element),
                Code = code,
                Description = GetResourceString(code, "Description"),
                Message = string.IsNullOrWhiteSpace(message) ? GetResourceString(code, "MessageFormat") : message,
                Type = category,
                Title = GetResourceString(code, "Title")
            };
        }
    }
}