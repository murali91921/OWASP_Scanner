using Microsoft.CodeAnalysis.CSharp.Syntax;
using System;
using System.Collections.Generic;
using System.IO;

namespace SAST.Engine.CSharp
{
    public class VulnerabilityDetail
    {
        public string FilePath { get; set; }

        public string LineNumber { get; set; }

        public string CodeSnippet { get; set; }

        public Enums.ScannerType Type { get; set; }

        public Enums.ScannerSubType SubType { get; set; }

        private string _description { get; set; }

        public string Description
        {
            get
            {
                if (string.IsNullOrEmpty(_description) && Type != Enums.ScannerType.None || Type != Enums.ScannerType.Invalid)
                {
                    _description = Utils.ScannerDescriptions.GetValueOrDefault(Type);
                    if (SubType != Enums.ScannerSubType.None)
                        _description = $"{_description}:{Utils.ScannerSubTypeDescriptions.GetValueOrDefault(SubType)}";
                }
                return _description;
            }
            set
            {
                _description = value;
            }
        }

        public override string ToString()
        {
            return $"{Path.GetFileName(FilePath)}:({LineNumber}) {Environment.NewLine}Snippet: {CodeSnippet} Type:{Type} Issue:{Description} Severity:{Severity}";
        }

        public Enums.Severity Severity
        {
            get
            {
                return Utils.ScannerSeverity.GetValueOrDefault(Type);
            }
        }
    }
}