using System;
using System.Collections.Generic;

namespace SAST.Engine.CSharp
{
    /// <summary>
    /// This object will contain vulnerable information such as File Path, Line Number, Code Snippet etc...
    /// </summary>
    public class VulnerabilityDetail
    {
        public string FilePath { get; set; }

        public string LineNumber { get; set; }

        public string CodeSnippet { get; set; }

        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Enums.ScannerType Type { get; set; }

        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Enums.ScannerSubType SubType { get; set; }

        private string _description { get; set; }

        public string Description
        {
            get
            {
                if (string.IsNullOrEmpty(_description) && (Type != Enums.ScannerType.None || Type != Enums.ScannerType.Invalid))
                {
                    _description = Utils.ScannerDescriptions.GetValueOrDefault(Type);
                    if (SubType != Enums.ScannerSubType.None)
                        _description = $"{_description}:{Utils.ScannerSubTypeDescriptions.GetValueOrDefault(Type).GetValueOrDefault(SubType)}";
                }
                return _description;
            }
            set
            {
                _description = value;
            }
        }

        public override string ToString()
            => $"{FilePath}:({LineNumber}) {Environment.NewLine}Snippet: {CodeSnippet} Type:{Type} Issue:{Description} Severity:{Severity}";

        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Enums.Severity Severity
        {
            get =>
                SubType == Enums.ScannerSubType.None ? Utils.ScannerTypeSeverity.GetValueOrDefault(Type) :
                    Utils.ScannerSubTypeSeverity.GetValueOrDefault(SubType);
        }

        internal static VulnerabilityDetail Create(string filePath, Microsoft.CodeAnalysis.SyntaxNode syntaxNode, string description, Enums.ScannerType scannerType, Enums.ScannerSubType scannerSubType = Enums.ScannerSubType.None)
            => new VulnerabilityDetail()
            {
                FilePath = filePath,
                CodeSnippet = syntaxNode.ToString(),
                LineNumber = Mapper.Map.GetLineNumber(syntaxNode),
                Type = scannerType,
                SubType = scannerSubType,
                _description = description
            };
    }
}